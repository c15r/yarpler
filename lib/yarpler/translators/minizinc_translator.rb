module Yarpler
  module Translators
    class MinizincTranslator < Translator

      FIXNUM_MAX = (2**(0.size * 8 -2) -1)
      FIXNUM_MIN = -(2**(0.size * 8 -2))

      T_HEADER = "%% File generated by YARPLER\n"
      T_INCLUDES = "include \"globals.mzn\";\n"
      T_FOOTER = "solve satisfy;" # @TODO: Wird momentan als Hack missbraucht um den kompletten Durchstich zu ermÃ¶glichen ;)

      def translate(problem)
        # Setup HEADER and INCLUDES
        code = T_HEADER
        code << T_INCLUDES

        # Generate variables
        attribute_translator = MinizincAttributeTranslator.new
        code << attribute_translator.translate(problem.objects)

        # Output
        code << "output [ \"\" " + attribute_translator.attribute_output + "];\n"

        # Footer
        code << T_FOOTER
        @output = code
      end

      class MinizincAttributeTranslator

        T_CONSTANT = "%s: %s = %s;\n" # int: id_dienst_frei = 0;
        T_OUTPUT = ", \"%s=\" , show(%s) , \" \"   "
        T_SET = "set of int: %s = {%s};\n"
        T_VARIABLE = "var %s: %s;\n" # var 0..2: m0t0;

        attr_reader :attribute_output

        def initialize
          @attribute_output = ''
        end

        def translate(objects)
          result = ''
          objects.each do |key, var|
            var.get_list_of_attributes
            result << convert_attributes(key, var)
          end
          result
        end

        def convert_attributes(name, resource, reference = false)
          code = ''
          resource.get_list_of_attributes.each do |a|
            case resource.get_variabletype(a)
              when 'CONSTANT'
                if reference
                  next
                end
                code<< T_CONSTANT % [resource.get_datatype(a), a + "_" + name, resource.load(a)]
              when 'VARIABLE'
                # @TODO wieder einbauen?
                #if !reference && resource.is_referenced
                #  next
                #end
                code<< T_VARIABLE % [resource.load(a), name + "_" + a]
                @attribute_output << T_OUTPUT % [name + "_" + a,name + "_" + a]
              when 'REFERENCE'
                i = 0
                resource.get_value(a).each do |r|

                  if r.kind_of?(Array)
                    ## Set
                    if constant_range?(r)
                      code << T_VARIABLE % [array_to_constant_range(r), name.to_s+"_"+ a +"_"+i.to_s]
                    else
                      set_name = "SET_"+name.to_s+"_"+ a+"_"+i.to_s
                      code << T_SET % [set_name, array_to_set_range(r)]
                      code << T_VARIABLE % [set_name, name.to_s+"_"+ a +"_"+i.to_s]
                    end
                    @attribute_output << T_OUTPUT % [name.to_s+"_"+ a +"_"+i.to_s,name.to_s+"_"+ a +"_"+i.to_s]
                    i=i.next
                  else
                    ## Einzelner Eintrag
                    code << convert_attributes(name.to_s+"_"+r.get_instance_name.to_s, r, true )
                  end

                end
            end
          end
          code
        end

        ## Checks if the range is constant (0,1,2) or not (0,1,3)
        def constant_range?(array)
          values = Array.new
          answer = true
          array.each do |o|
            values.push(o.id)
          end
          values.sort

          last_value = nil
          values.each do |v|

            if last_value.nil?
              last_value=v
              next
            end

            if last_value+1==v
              last_value=v
            else
              answer=false
              break
            end
          end
          answer
        end

        def array_to_set_range(array)
          range = ""
          is_first = true
          array.each do |o|
            if not is_first
              range << ", "
            end
            range << o.id.to_s
            is_first = false
          end
          range
        end

        def array_to_constant_range(array)
          min = FIXNUM_MAX
          max = FIXNUM_MIN
          array.each do |o|
            if min > o.id
              min = o.id
            end

            if max < o.id
              max = o.id
            end
          end
          min.to_s + '..' + max.to_s
        end
      end

    end
  end
end