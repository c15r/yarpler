module Yarpler
  # The Interpreter is responsible for interpreting the AST generated by ANTLR3
  # It builds the Interface to all the Yarpler::Interpreters
  class Interpreter
    def initialize
    end

    def interpret(antlr_ast)
      antlr_ast.each do |item|
        interpret_block(item)
      end
      Yarpler::Models::Problem.instance
    end

    def interpret_block(item)
      case item.to_s
      when 'MODEL_DECLARATION'
        interpret_model_declaration(item)
      when 'INITIAL_DECLARATION'
        interpret_initial_declaration(item)
      when 'SOLVE_DECLARATION'
        interpret_solve_declaration(item)
      else
        Yarpler::Log.instance.warn 'Block could not be interpreted'
      end
    end

    def interpret_model_declaration(item)
      Yarpler::Interpreters::ModelInterpreter.new(item)
    end

    def interpret_initial_declaration(item)
      initial = Yarpler::Interpreters::InitialInterpreter.new(item)
      Yarpler::Models::Problem.instance.objects = initial.objects
    end

    def interpret_solve_declaration(item)
      solve_interpreter = Yarpler::Interpreters::SolveInterpreter.new(item, Yarpler::Models::Problem.instance.objects)
      Yarpler::Models::Problem.instance.solve = solve_interpreter.solve
      Yarpler::Models::Problem.instance.constraints = solve_interpreter.constraints
    end
  end
end
