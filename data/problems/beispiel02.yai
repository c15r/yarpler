model {
      class Tag {
      }

      class Dienst {
        var integer anzahl;
      }

      class Mitarbeitertag {
        var Dienst dienst;
        const Tag tag;
      }

      class Mitarbeiter {
        const collection Mitarbeitertag tage;
      }

}

initial {

  // Definition von Diensten
  d1 = new Dienst(anzahl=1);
  d2 = new Dienst(anzahl=1);
  d3 = new Dienst(anzahl=1);
  f = new Dienst();

  // Definition von Tagen
  t1 = new Tag();
  t2 = new Tag();

  // Definition von Mitarbeitern
  m1 = new Mitarbeiter();
  m2 = new Mitarbeiter();
  m3 = new Mitarbeiter();

  // Definition von Mitarbeitertagen
  m1t1 = new Mitarbeitertag();
  m1t2 = new Mitarbeitertag();
  m2t1 = new Mitarbeitertag();
  m2t2 = new Mitarbeitertag();
  m3t1 = new Mitarbeitertag();
  m3t2 = new Mitarbeitertag();

  // Definition von Relationen
  relation(m1.tage, {m1t1, m1t2});
  relation(m2.tage, {m2t1, m2t2});
  relation(m3.tage, {m3t1, m3t2});

  relation(m1t1.tag, t1);
  relation(m1t2.tag, t2);
  relation(m2t1.tag, t1);
  relation(m2t2.tag, t2);
  relation(m3t1.tag, t1);
  relation(m3t2.tag, t2);

  relation(m1t1.dienst, {d1,d2,d3,f});
  relation(m1t2.dienst, {d1,d2,d3,f});
  relation(m2t1.dienst, {d1,d2,d3,f});
  relation(m2t2.dienst, {d1,d2,d3,f});
  relation(m3t1.dienst, {d1,d2,d3,f});
  relation(m3t2.dienst, {d1,d2,d3,f});
}

solve {

  // Summe aller Dienste D1, D2, D3 ueber alle Mitarbeiter und Tage ist je 1
  constraint forall(d from Dienst where d.id!=f.id) {
    count(di from Mitarbeitertag.dienst where di==d) == d.anzahl
  };

  // Nach D1 kein D2
  constraint forall(m from Mitarbeiter) {
    forall (mt from m.tage) {
      not(d1 == mt.dienst) or not(d2 == mt[1].dienst)
    }
  };

  satisfy;
}