model {
      class Tag {
      }

      class Diensttyp {
        var integer anzahl;
        const integer dauer;
      }

      class Dienst {
        const Diensttyp typ;
        var integer dauer;
      }

      class Mitarbeitertag {
        var Dienst dienst;
        const Tag tag;
        var integer dauer;
      }

      class Mitarbeiter {
        const collection Mitarbeitertag tage;
        const integer sollarbeitszeit;
        var integer istarbeitszeit;
        var integer abweichung;
      }

}

initial {

  // Definition von Diensttypen
  dt1 = new Diensttyp(anzahl=2,dauer=4);
  dt2 = new Diensttyp(anzahl=1,dauer=2);
  dt3 = new Diensttyp(anzahl=1,dauer=2);
  dtf = new Diensttyp(anzahl=1,dauer=0);

  // Definition von Diensttypen
  d1 = new Dienst();
  d2 = new Dienst();
  d3 = new Dienst();
  f = new Dienst();

  // Definition von Tagen
  t1 = new Tag();
  t2 = new Tag();

  // Definition von Mitarbeitern
  m1 = new Mitarbeiter(sollarbeitszeit=4);
  m2 = new Mitarbeiter(sollarbeitszeit=4);
  m3 = new Mitarbeiter(sollarbeitszeit=4);

  // Definition von Mitarbeitertagen
  m1t1 = new Mitarbeitertag();
  m1t2 = new Mitarbeitertag();
  m2t1 = new Mitarbeitertag();
  m2t2 = new Mitarbeitertag();
  m3t1 = new Mitarbeitertag();
  m3t2 = new Mitarbeitertag();

  // Definition von Relationen
  relation(m1.tage, {m1t1, m1t2});
  relation(m2.tage, {m2t1, m2t2});
  relation(m3.tage, {m3t1, m3t2});

  relation(m1t1.tag, t1);
  relation(m1t2.tag, t2);
  relation(m2t1.tag, t1);
  relation(m2t2.tag, t2);
  relation(m3t1.tag, t1);
  relation(m3t2.tag, t2);

  relation(d1.typ, dt1);
  relation(d2.typ, dt2);
  relation(d3.typ, dt3);
  relation(f.typ, dtf);

  relation(m1t1.dienst, {d1,d2,d3,f});
  relation(m1t2.dienst, {d1,d2,d3,f});
  relation(m2t1.dienst, {d1,d2,d3,f});
  relation(m2t2.dienst, {d1,d2,d3,f});
  relation(m3t1.dienst, {d1,d2,d3,f});
  relation(m3t2.dienst, {d1,d2,d3,f});
}

solve {

  // Zaehlen von Diensttypen ueber alle Tage
  constraint countall(mt from Mitarbeitertag) {
    forall(d from Dienst where dt1.id == d.typ) {
      mt.dienst == d
    }
  } == dt1.anzahl;

  constraint countall(mt from Mitarbeitertag) {
    forall(d from Dienst where dt2.id == d.typ) {
      mt.dienst == d
    }
  } == dt2.anzahl;

  constraint countall(mt from Mitarbeitertag) {
    forall(d from Dienst where dt3.id == d.typ) {
      mt.dienst == d
    }
  } == dt3.anzahl;

  // Istarbeitszeit entspricht der Dauer aller zugeordneten Diensten
  constraint forall(m from Mitarbeiter) {
    sum(mt from m.tage) {
      mt.dauer
    } == m.istarbeitszeit
  };

  // Dauer eines Mitarbeitertags entspricht der Summe der kompletten Dauer der zugeordneten Dienste
  constraint forall(mt from Mitarbeitertag) {
    sum(d from mt.dienst) {
      d.dauer
    } == mt.dauer
  };

  // Dauer eines Diensts entspricht der Summe der kompletten Dauer des zugeordneten Diensttyps
  constraint forall(d from Dienst) {
    sum(t from d.typ) {
      t.dauer
    } == d.dauer
  };

  // Abweichung entspricht der Differenz von Soll- zu Istarbeitszeit
  constraint forall(m from Mitarbeiter) {
    m.abweichung == m.sollarbeitszeit - m.istarbeitszeit
  };

  // Zielfunktion minimiert die Absolutwerte der Abweichungen
  minimize abs(m1.abweichung) + abs(m2.abweichung) + abs(m3.abweichung);


}