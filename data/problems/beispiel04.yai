model {
      class Zeitfenster {
        const integer start;
        const integer stop;
      }

      class Dienst {
        const Zeitfenster fenster;
        var integer start;
        var integer stop;
      }

      class Mitarbeiter {
        var collection Dienst dienste;
      }
}

initial {
  m1 = new Mitarbeiter();
  m2 = new Mitarbeiter();

  zf1 = new Zeitfenster(start=0, stop=4);
  zf2 = new Zeitfenster(start=3, stop=7);
  zf3 = new Zeitfenster(start=6, stop=10);
  zf4 = new Zeitfenster(start=9, stop=13);

  d1 = new Dienst();
  relation(d1.fenster, zf1);

  d2 = new Dienst();
  relation(d2.fenster, zf2);

  d3 = new Dienst();
  relation(d3.fenster, zf3);

  d4 = new Dienst();
  relation(d4.fenster, zf4);


  relation(m1.dienste, {d1,d2,d3,d4});
  relation(m2.dienste, {d1,d2,d3,d4});
}

solve {
  // Summe aller Dienste D1, D2, D3 ueber alle Mitarbeiter und Tage ist je 1
  constraint forall(d from Dienst) {
    count(di from Mitarbeiter.dienste where di==d) == 1
  };

  // Hilfsvariablen auf Dienst abfuellen
  constraint forall(d from Dienst) {
    forall(z from Zeitfenster) {
        (z==d.fenster and d.start == z.start and d.stop == z.stop) or z!=d.fenster
    }
  };

  // Ueberschneidungen ausschliessen
  constraint forall(m from Mitarbeiter) {
    forall(a from Dienst) {
        forall(b from Dienst where a.id!=b.id) {
            not(a in m.dienste and b in m.dienste and not(a.stop <= b.start or b.stop <= a.start))
        }
    }
  };

  satisfy;
}