model {
      class Zeitfenster {
        const integer start;
        const integer stop;
      }

      class Dienst {
        const Zeitfenster fenster;
        const integer start;
        const integer stop;
      }

      class Mitarbeiter {
        var collection Dienst dienste;
      }
}

initial {
  m1 = new Mitarbeiter();
  m2 = new Mitarbeiter();

  zf1 = new Zeitfenster(start=0, stop=8);
  zf2 = new Zeitfenster(start=8, stop=16);
  zf3 = new Zeitfenster(start=10, stop=18);

  d1 = new Dienst(start=0, stop=7);
  relation(d1.fenster, zf1);

  d2 = new Dienst(start=8, stop=16);
  relation(d2.fenster, zf2);

  d3 = new Dienst(start=10, stop=18);
  relation(d3.fenster, zf3);

  relation(m1.dienste, {d1,d2,d3});
  relation(m2.dienste, {d1,d2,d3});
}

solve {
  // Summe aller Dienste D1, D2, D3 ueber alle Mitarbeiter und Tage ist je 1
  constraint forall(d from Dienst) {
    count(di from Mitarbeiter.dienste where di==d) == 1
  };

  constraint countall(m from Mitarbeiter) {
    d1 in m.dienste and d2 in m.dienste and not(zf1.stop < zf2.start or zf2.stop < zf1.start)
  } == 0;

  constraint countall(m from Mitarbeiter) {
    d1 in m.dienste and d3 in m.dienste and not(zf1.stop < zf3.start or zf3.stop < zf1.start)
  } == 0;

  constraint countall(m from Mitarbeiter) {
    d2 in m.dienste and d1 in m.dienste and not(zf2.stop < zf1.start or zf1.stop < zf2.start)
  } == 0;

  constraint countall(m from Mitarbeiter) {
    d2 in m.dienste and d3 in m.dienste and not(zf2.stop < zf3.start or zf3.stop < zf2.start)
  } == 0;

  constraint countall(m from Mitarbeiter) {
    d3 in m.dienste and d1 in m.dienste and not(zf3.stop < zf1.start or zf1.stop < zf3.start)
  } == 0;

  constraint countall(m from Mitarbeiter) {
    d3 in m.dienste and d2 in m.dienste and not(zf3.stop < zf2.start or zf2.stop < zf3.start)
  } == 0;

  satisfy;
}