model {
      class Tag {
      }

      class Diensttyp {
        var integer anzahl;
      }

      class Dienst {
        var Diensttyp dienst;
        const Tag tag;
      }

      class Mitarbeiter {
        const collection Diensttyp moeglich;
        const collection Dienst tage;
      }
}

initial {

  # Definition von Diensttypen
  d1 = new Diensttyp(anzahl=1);
  d2 = new Diensttyp(anzahl=1);
  d3 = new Diensttyp(anzahl=1);
  f = new Diensttyp();

  # Definition von Tagen
  t1 = new Tag();
  t2 = new Tag();

  # Definition von Mitarbeitern
  m1 = new Mitarbeiter();
  m2 = new Mitarbeiter();
  m3 = new Mitarbeiter();

  # Definition von Dienst
  m1t1 = new Dienst();
  m1t2 = new Dienst();
  m2t1 = new Dienst();
  m2t2 = new Dienst();
  m3t1 = new Dienst();
  m3t2 = new Dienst();

  # Definition von Relationen
  relation(m1t1.tag, t1);
  relation(m1t2.tag, t2);
  relation(m2t1.tag, t1);
  relation(m2t2.tag, t2);
  relation(m3t1.tag, t1);
  relation(m3t2.tag, t2);

  # Tage pro Mitarbeiter
  relation(m1.tage, {m1t1,m1t2});
  relation(m2.tage, {m2t1,m2t2});
  relation(m3.tage, {m3t1,m3t2});

  # Mögliche Dienste pro Mitarbeiter
  relation(m1.moeglich, {d1,d2,f});
  relation(m2.moeglich, {d1,d2,d3,f});
  relation(m3.moeglich, {d2,d3,f});
}

solve {
  # Dienstschlüssel einhalten
  constraint {
    count(d1 in Dienst.dienst) == d1.anzahl
  }

  constraint {
    count(d2 in Dienst.dienst) == d2.anzahl
  }

  constraint {
    count(d3 in Dienst.dienst) == d3.anzahl
  }

  # Nach D1 kein D2
  constraint {
    forAll(m in Mitarbeiter) {
      forAll(mt in m.tage) {
        mt.dienst!=d1 or mt[1].dienst!=d2
      }
    }
  }

  # Mitarbeiter kriegen nur mögliche Dienste
  constraint {
      forAll(m in Mitarbeiter) {
          forAll(mt in m.tage) {
              mt.dienst in m.moeglich
          }
      }
  }

  satisfy;
}