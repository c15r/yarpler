model {
      class Tag {
      }

      class Dienst {
        var integer anzahl;
        const integer istfrei;
      }

      class Mitarbeiter {
      }

      class Mitarbeitertag {
        var collection Dienst dienste;
        const Mitarbeiter ma;
        const Tag tag;
      }
}

initial {

  # Definition von Diensten
  d1 = new Dienst(anzahl=1, istfrei=0);
  d2 = new Dienst(anzahl=1, istfrei=0);
  d3 = new Dienst(anzahl=1, istfrei=0);
  f = new Dienst(istfrei=1);

  # Definition von Tagen
  t1 = new Tag();
  t2 = new Tag();

  # Definition von Mitarbeitern
  m1 = new Mitarbeiter();
  m2 = new Mitarbeiter();
  m3 = new Mitarbeiter();

  # Definition von Mitarbeitertagen
  m1t1 = new Mitarbeitertag();
  m1t2 = new Mitarbeitertag();
  m2t1 = new Mitarbeitertag();
  m2t2 = new Mitarbeitertag();
  m3t1 = new Mitarbeitertag();
  m3t2 = new Mitarbeitertag();

  # Definition von Relationen
  relation(m1t1.tag, t1);
  relation(m1t2.tag, t2);
  relation(m2t1.tag, t1);
  relation(m2t2.tag, t2);
  relation(m3t1.tag, t1);
  relation(m3t2.tag, t2);

  relation(m1t1.ma, m1);
  relation(m1t2.ma, m1);
  relation(m2t1.ma, m2);
  relation(m2t2.ma, m2);
  relation(m3t1.ma, m3);
  relation(m3t2.ma, m3);

  relation(m1t1.dienste, {d1,d2,d3,f});
  relation(m1t2.dienste, {d1,d2,d3,f});
  relation(m2t1.dienste, {d1,d2,d3,f});
  relation(m2t2.dienste, {d1,d2,d3,f});
  relation(m3t1.dienste, {d1,d2,d3,f});
  relation(m3t2.dienste, {d1,d2,d3,f});
}

solve {
  # Kardinalitaet aller Dienstvariablen auf 1 setzen
  constraint {
    forall(mt from Mitarbeitertag) {
        count(d from mt.dienste) == 1
    }
  }

  # Summe aller Dienste D1, D2, D3 ueber alle Mitarbeiter und Tage ist je 1
  constraint {
     forall(d from Dienst where d.istfrei==0) {
       count(di from Mitarbeitertag.dienste where di==d) == d.anzahl
     }
  }

  satisfy;
}